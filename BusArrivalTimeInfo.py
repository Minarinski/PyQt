# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\pyqt_test.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


#from PyQt5 import QtCore, QtGui, QtWidgets

import requests
import xmltodict
import time
import threading
import sys
from collections import defaultdict
sys.path.append('.')
from pyqt_test import *
from datetime import datetime
import pyttsx3
import serial
import re
from PyQt5.QtCore import QTimer

class BusArrival():
    
    def __init__(self):
        self.key = ''
        self.BusStopID = ''
        
        self.units = ["", "십", "백", "천"]
        self.num_to_korean = ["", "일", "이", "삼", "사", "오", "육", "칠", "팔", "구"]
        
        
        self.ADImageList = ['image/AD/1.png', 'image/AD/2.png', 'image/AD/3.png', 'image/AD/4.png', 'image/AD/5.png']
        self.labelList = [{'Route': ui.label_2, 'Destination': ui.label_3, 'Minute': ui.label_4, 'Location': ui.label_5, 'Icon': ui.label_25},
                    {'Route': ui.label_6, 'Destination': ui.label_7, 'Minute': ui.label_8, 'Location': ui.label_9, 'Icon': ui.label_26},
                    {'Route': ui.label_10, 'Destination': ui.label_11, 'Minute': ui.label_12, 'Location': ui.label_13, 'Icon': ui.label_27},
                    {'Route': ui.label_14, 'Destination': ui.label_15, 'Minute': ui.label_16, 'Location': ui.label_17, 'Icon': ui.label_28},
                    {'Route': ui.label_18, 'Destination': ui.label_19, 'Minute': ui.label_20, 'Location': ui.label_21, 'Icon': ui.label_29}]
        self.BoardingUiList = [ui.label_32, ui.label_33, ui.label_34, ui.label_35]
        
        self.ArriveInfoList = []
        self.nowArriveList = []
        self.nowArriveStr = ''
        self.AleadyCallList = []
        self.SpeakerList = []
        self.BoardingNumList = []
        self.pageFlag = 0
        self.pageCnt = 0
        
        self.ser = serial.Serial(
                    port = 'COM8', 
                    baudrate=115200, 
                    parity='N',
                    stopbits=1,
                    bytesize=8,
                    timeout=8
                    )
        
        self.now = datetime.now()
    
    def speak_text(self, text):
        engine = pyttsx3.init()
        engine.setProperty('rate', 150)
        engine.say(text)
        engine.runAndWait()
        

    def number_to_korean(self, number_str):
        number_str = number_str.lstrip('0')  # 앞쪽의 0 제거
        if not number_str:
            return "영"
        return self.convert_section_to_korean(number_str)
        
    def convert_section_to_korean(self, section):
        korean_section = []
        if section[0] == '마':
            korean_section.append("마을")
            section = section[2:]
        length = len(section)
        for i, num in enumerate(section):
            if num != '0':
                tmp = self.num_to_korean[int(num)] + self.units[length - i - 1] if int(num) != 1 or self.units[length - i - 1] == '' else self.units[length - i - 1]
                korean_section.append(tmp)
        return ''.join(korean_section)

    def getInfo(self, filename):
        f = open(filename, 'r')
        lines = f.readlines()
        d = {}
        for line in lines:
            a,b = line.split('=')
            d[a] = b if b[-1] != '\n' else b[:-1]
        self.key = d['key']
        self.BusStopID = d['BusStopID']

    def SerialRead(self):
        self.ser.isOpen()

        pattern = re.compile('^0x02.*0x03$')
        self.BoardingNumList = []
        while True:
            if self.ser.in_waiting > 0:  # 읽을 데이터가 있는지 확인
                data = self.ser.readline().decode('utf-8').rstrip() # 데이터를 읽고 디코딩
                # 정규식 매칭
                if pattern.match(data):
                    dataSplit = data[4:-4].split(',')
                    idx = int(dataSplit[0])+ (5*self.pageFlag)
                    print(idx)
                    if self.ArriveInfoList[idx]['ROUTE_NO'] != '999':
                        if dataSplit[1] == '1':
                            print(f"{self.ArriveInfoList[idx]['ROUTE_NO']}번 버스 요청")
                            if self.ArriveInfoList[idx]['ROUTE_NO'] not in self.BoardingNumList:     
                                self.BoardingNumList.append(self.ArriveInfoList[idx]['ROUTE_NO'])
                        elif dataSplit[1] == '2':
                            print(f"{self.ArriveInfoList[idx]['ROUTE_NO']}번 버스 헬프콜")
                            self.BoardingNumList.append(self.ArriveInfoList[idx]['ROUTE_NO'])
                        else:
                            print(f"{self.ArriveInfoList[idx]['ROUTE_NO']}번 버스 요청 취소")
                            for i in range(len(self.BoardingNumList)):
                                if self.BoardingNumList[i] == self.ArriveInfoList[idx]['ROUTE_NO']:
                                    self.BoardingNumList.pop(i)
                                    break
                for i in self.BoardingUiList:
                    i.setText("")
                for i in range(len(self.BoardingNumList)):
                    self.BoardingUiList[i].setText(self.BoardingNumList[i])

    def DrawQt(self):
        while True:
            ui.label_23.setText(str(self.now.month)+'월  '+str(self.now.day)+'일')
            ui.label_24.setText("{0:02d}:{1:02d}".format(self.now.hour, self.now.minute))
            #'Route': ui.label_6, 'Destination': ui.label_7, 'Minute': ui.label_8, 'Location': ui.label_9, 'Icon'
            for i in range(5):
                idx = i + (5*self.pageFlag)
                if self.ArriveInfoList[idx]['ROUTE_NO'] == '999':
                    self.labelList[i]['Route'].setText('')
                    self.labelList[i]['Destination'].setText('')
                    self.labelList[i]['Minute'].setText('')
                    self.labelList[i]['Location'].setText('')
                    # self.labelList[i]['Icon'].setText('')
                    # self.labelList[i]['Icon'].setPixmap(QtGui.QPixmap("image/asset/not.png"))
                    # self.labelList[i]['Icon'].setScaledContents(True)
                else:
                    if self.ArriveInfoList[idx]['ROUTE_NO'][:2] == '마을' or len(self.ArriveInfoList[idx]['ROUTE_NO']) == 1:
                        self.labelList[i]['Icon'].setText("")
                        self.labelList[i]['Icon'].setPixmap(QtGui.QPixmap("image/asset/maeul.png"))
                        self.labelList[i]['Icon'].setScaledContents(True)
                    # elif self.ArriveInfoList[idx]['isLowFloor'] == '1':
                    #     self.labelList[i]['Icon'].setText("")
                    #     self.labelList[i]['Icon'].setPixmap(QtGui.QPixmap("image/asset/lowFloor.png"))
                    #     self.labelList[i]['Icon'].setScaledContents(True)
                    else:
                        self.labelList[i]['Icon'].setText("")
                        self.labelList[i]['Icon'].setPixmap(QtGui.QPixmap("image/asset/not.png"))
                        self.labelList[i]['Icon'].setScaledContents(True)
                    self.labelList[i]['Route'].setText(self.ArriveInfoList[idx]['ROUTE_NO'])
                    if len(self.ArriveInfoList[idx]['DESTINATION']) < 7:
                        self.labelList[i]['Destination'].setText(self.ArriveInfoList[idx]['DESTINATION'])
                    else:
                        font = QtGui.QFont()
                        font.setFamily("나눔고딕 ExtraBold")
                        font.setPointSize(20)
                        font.setBold(True)
                        font.setWeight(75)
                        self.labelList[i]['Destination'].setFont(font)
                        self.labelList[i]['Destination'].setText(self.ArriveInfoList[idx]['DESTINATION'])
                    self.labelList[i]['Location'].setStyleSheet("color: rgb(0, 0, 0);")
                    if self.ArriveInfoList[idx]['MSG_TP'] == '07':
                        self.labelList[i]['Minute'].setStyleSheet("color: rgb(255, 255, 255);")
                        self.labelList[i]['Minute'].setText('운행대기')
                        self.labelList[i]['Location'].setText('운행대기')
                    elif self.ArriveInfoList[idx]['MSG_TP'] == '06':
                        self.labelList[i]['Minute'].setStyleSheet("color: rgb(255, 0, 0);")
                        self.labelList[i]['Minute'].setText('진입중')
                        self.labelList[i]['Location'].setText(self.ArriveInfoList[idx]['BusStopNm'])
                    elif int(self.ArriveInfoList[idx]['EXTIME_MIN']) <= 3:
                        if int(self.ArriveInfoList[idx]['EXTIME_MIN']) <= 1:
                            self.labelList[i]['Location'].setStyleSheet("color: rgb(255, 0, 0);")
                            self.labelList[i]['Location'].setText('전 정류장에서 출발')
                        else:
                            self.labelList[i]['Location'].setText(self.ArriveInfoList[idx]['BusStopNm'])
                        self.labelList[i]['Minute'].setStyleSheet("color: rgb(255, 255, 255);")
                        self.labelList[i]['Minute'].setText('잠시 후\n도착')
                    else:
                        self.labelList[i]['Minute'].setStyleSheet("color: rgb(255, 255, 255);")
                        self.labelList[i]['Minute'].setText(self.ArriveInfoList[idx]['EXTIME_MIN']+'분')
                        self.labelList[i]['Location'].setText(self.ArriveInfoList[idx]['BusStopNm'])
            
            ui.label_30.setText("")
            ui.label_30.setPixmap(QtGui.QPixmap(self.ADImageList[0]))
            ui.label_30.setScaledContents(True)
            ui.label_31.setText("")
            ui.label_31.setPixmap(QtGui.QPixmap(self.ADImageList[1]))
            ui.label_31.setScaledContents(True)
            
            self.nowArriveStr = ' '.join(self.nowArriveList)
            
            ui.label_22.setText(self.nowArriveStr)
            
            time.sleep(2)

    def CallApi(self):
        while True:
            self.now = datetime.now()
            response = requests.get('http://openapitraffic.daejeon.go.kr/api/rest/arrive/getArrInfoByStopID?serviceKey='+self.key+'&BusStopID='+self.BusStopID)    
            ArriveInfoDict = xmltodict.parse(response.text)
            ArriveInfoListBefore = []
            for ArriveInfo in ArriveInfoDict['ServiceResult']['msgBody']['itemList']:
                BusStopNm = ''
                CarNM = ''
                RouteID = ''
                if ArriveInfo['MSG_TP'] != '07':
                    if isinstance(ArriveInfo, dict):
                        RouteID = ArriveInfo['ROUTE_CD']
                        CarNM = ArriveInfo['CAR_REG_NO']
                    else:
                        RouteID = ArriveInfo[0]['ROUTE_CD']
                        CarNM = ArriveInfo[0]['CAR_REG_NO']
                if 'LAST_STOP_ID' in ArriveInfo.keys():
                    response = requests.get('http://openapitraffic.daejeon.go.kr/api/rest/stationinfo/getStationByUid?serviceKey='+self.key+'&arsId='+ArriveInfo['LAST_STOP_ID'])    
                    stationInfoDict = xmltodict.parse(response.text)
                    if isinstance(stationInfoDict['ServiceResult']['msgBody']['itemList'], dict):
                        BusStopNm = stationInfoDict['ServiceResult']['msgBody']['itemList']['BUSSTOP_NM']
                    else:
                        BusStopNm = stationInfoDict['ServiceResult']['msgBody']['itemList'][0]['BUSSTOP_NM']
                else:
                    BusStopNm = '운행대기'
                ArriveInfoListBefore.append([ArriveInfo['ROUTE_NO'], {'ROUTE_NO': ArriveInfo['ROUTE_NO'], 'DESTINATION': ArriveInfo['DESTINATION'],'EXTIME_MIN': ArriveInfo['EXTIME_MIN'], 'MSG_TP': ArriveInfo['MSG_TP'], 'BusStopNm': BusStopNm, 'CarNM': CarNM, 'RouteID': RouteID, 'isLowFloor': '0'}])
            ArriveInfoListBefore.sort()
            
            self.ArriveInfoList = []
            
            for i in range(len(ArriveInfoListBefore)):
                self.ArriveInfoList.append(ArriveInfoListBefore[i][1])
            
            while len(self.ArriveInfoList)%5 != 0:
                self.ArriveInfoList.append({'ROUTE_NO': '999', 'DESTINATION': '','EXTIME_MIN': '', 'MSG_TP': '', 'BusStopNm': '', 'CarNM': '', 'RouteID': '', 'isLowFloor': '0'})
                
            self.pageCnt = len(self.ArriveInfoList)//5
                
            # for i in range(5):
            #     idx = i + (5*self.pageFlag)
            #     if self.ArriveInfoList[idx]['RouteID']:
            #         response = requests.get('http://openapitraffic.daejeon.go.kr/api/rest/busreginfo/getBusRegInfoByRouteId?serviceKey='+self.key+'&busRouteId='+self.ArriveInfoList[idx]['RouteID'])    
            #         dict_data = xmltodict.parse(response.text)
            #         for j in dict_data['ServiceResult']['msgBody']['itemList']:
            #             if j['CAR_REG_NO'] == self.ArriveInfoList[idx]['CarNM']:
            #                 if j['BUS_TYPE'] == '2':
            #                     self.ArriveInfoList[idx]['isLowFloor'] = '1'
            #                     break
            #                 else:
            #                     self.ArriveInfoList[idx]['isLowFloor'] = '0'
            #                     break
            #     else:
            #         self.ArriveInfoList[idx]['isLowFloor'] = '0'
            
            self.nowArriveList = []
            
            for i in range(len(self.ArriveInfoList)):
                if len(self.ArriveInfoList[i]['ROUTE_NO']) == 1:
                        self.ArriveInfoList[i]['ROUTE_NO'] = '마을'+self.ArriveInfoList[i]['ROUTE_NO'] 
                if self.ArriveInfoList[i]['MSG_TP'] == '06':
                    if self.ArriveInfoList[i]['ROUTE_NO'] in self.AleadyCallList:
                        del self.AleadyCallList[self.AleadyCallList.index(self.ArriveInfoList[i]['ROUTE_NO'])]
                        
                    if self.ArriveInfoList[i]['ROUTE_NO'] in self.BoardingNumList:
                        del self.BoardingNumList[self.BoardingNumList.index(self.ArriveInfoList[i]['ROUTE_NO'])]
                    
                    self.nowArriveList.append(self.ArriveInfoList[i]['ROUTE_NO'])
            
            time.sleep(2)

            
    def SpeakerNowArrive(self):
        while True:
            if self.nowArriveList:
                for i in self.nowArriveList:
                    if i in self.AleadyCallList:
                        self.SpeakerList.append(self.number_to_korean(i)+"번 버스가 진입중입니다. 뒤로 한걸음 물러서 주세요.")
                        self.AleadyCallList.append(i)
            
            
    def threadPageFlagToggle(self):
        while True:
            time.sleep(7)
            self.pageFlag = (self.pageFlag+1)%self.pageCnt
            #print(self.pageFlag, self.pageCnt)
            self.ADImageList.append(self.ADImageList[0])
            self.ADImageList = self.ADImageList[1:]


    def startGuiUpdate(self):
        self.timer = QTimer()
        self.timer.timeout.connect(self.DrawQt)
        self.timer.start(2000)  # 2초마다 업데이트

if __name__ == "__main__":
    
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    
    Dialog.setWindowFlags(QtCore.Qt.FramelessWindowHint)
    
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    
    BusInfo = BusArrival()
    
    #BusInfo.startGuiUpdate()
    BusInfo.getInfo("info.txt")
    print("info")
    threadCallApi = threading.Thread(target=BusInfo.CallApi)
    threadCallApi.daemon = True; threadCallApi.start()
    print("CallApi")
    time.sleep(3)
    
    threadSpeakerNowArrive = threading.Thread(target=BusInfo.SpeakerNowArrive)
    threadSpeakerNowArrive.daemon = True; threadSpeakerNowArrive.start()
    print("Speaker")
    
    threadSerialRead = threading.Thread(target=BusInfo.SerialRead)
    threadSerialRead.daemon = True; threadSerialRead.start()
    print("SerialRead")
    
    threadDrawQt = threading.Thread(target=BusInfo.DrawQt)
    threadDrawQt.daemon = True; threadDrawQt.start()
    print("DrawQt")
    
    threadPageFlagToggle = threading.Thread(target=BusInfo.threadPageFlagToggle)
    threadPageFlagToggle.daemon = True; threadPageFlagToggle.start()
    print("threadPageFlagToggle")
    
    Dialog.showMaximized()
    sys.exit(app.exec_())
